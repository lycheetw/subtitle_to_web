{"version":3,"sources":["locales/en_US.js","locales/zh_TW.js","components/Converter/SubtitleLine/SubtitleLine.js","locales/LanguageList.js","components/Converter/Converter.js","locales/LocalUtils.js","App.js","serviceWorker.js","index.js"],"names":["__webpack_require__","r","__webpack_exports__","en_US","print","select_file","zh_TW","SubtitleLine","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","marginTop","list","text","split","reduce","a","b","concat","time","length","react_default","createElement","className","style","dangerouslySetInnerHTML","__html","React","Component","display","language","Line","startTime","endTime","startTimeStamp","Date","replace","endTimeStamp","Converter","_this","languageChanged","onLanguageChanged","bind","assertThisInitialized","onSelectFile","state","subtitleLines","files","_this2","file","reader","FileReader","onload","e","startTtime","lines","target","result","lineWarps","i","line","match","_wrapRegExp","start","end","push","groups","setState","readAsText","printBtn","_this3","languageOptions","LanguageList","map","it","key","value","idx","timeTag","pre","Converter_SubtitleLine_SubtitleLine","index_es","id","type","onChange","accept","LocalUtils","localStorageLanguage","window","localStorage","LOCAL_STORAGE_KEY_LOCAL","navigator","local","locale","require","default","messages","App","addLocaleData","toConsumableArray","enLocaleData","zhLocaleData","chooseDefaultLocal","chooseLocaleMessages","languageCode","saveLocal","components_Converter_Converter","Boolean","location","hostname","ReactDOM","render","App_App","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.470ca178.chunk.js","sourcesContent":["const en_US = {\n    \"print\": \"Print\",\n    \"select_file\": \"Select file (.srt)\"\n}\n\nexport default en_US;","const zh_TW = {\n    \"print\": \"列印\",\n    \"select_file\": \"選擇檔案(.srt)\"\n}\n\nexport default zh_TW;","import React from 'react';\nimport {Field,FormattedMessage} from 'react-intl';\nimport styles from './styles.css';\n\nclass SubtitleLine extends React.Component {\n    constructor(props) {\n        super(props);\n        \n    }\n\n    render() {\n        let text = this.props.text;\n        const list = text.split('\\n').reduce((a, b) => {\n            return `${a}<div>${b}</div>`\n        }, \"\");\n     \n\n        let marginTop;\n        if(this.props.time.length != 0) {\n            marginTop = {marginTop: 15}\n        } else {\n            marginTop = {marginTop: 0}\n        }\n\n        return (\n            <div>\n                <div className=\"time\" style={marginTop}>{this.props.time}</div>\n                <div className=\"text\"><span dangerouslySetInnerHTML={{__html: list}}/></div>\n            </div>\n        )\n    };\n\n}\n\nexport default SubtitleLine;","const list = [\n    {\n      display: \"English\",\n      language: \"en-US\"\n    },\n    {\n      display: \"繁體中文\",\n      language: \"zh-TW\"\n    }\n  ];\n    \nexport default list;","import React from 'react';\nimport {Field,FormattedMessage} from 'react-intl';\nimport SubtitleLine from './SubtitleLine'\nimport LanguageList from '../../locales/LanguageList'\nimport styles from './styles.css';\n\nclass Line {\n    constructor(startTime, endTime, text) {\n        this.time = `${startTime}`;\n        this.text = text;\n        this.startTimeStamp = new Date(`1970-01-01T${startTime.replace(',','.')}Z`);\n        this.endTimeStamp = new Date(`1970-01-01T${endTime.replace(',','.')}Z`);\n    }\n}\n\nclass Converter extends React.Component {\n    constructor(props) {\n        super(props);\n        this.languageChanged = this.onLanguageChanged.bind(this);\n        this.onSelectFile = this.onSelectFile.bind(this);\n        this.state = {\n            subtitleLines: []\n        }\n    }\n\n    onLanguageChanged(language) {\n        this.props.onLanguageChanged(language)\n    }\n    \n    onSelectFile(files) {\n        if(files.length != 1) {\n            return\n        }\n        const file = files[0];\n        const reader = new FileReader();\n        reader.onload = (e) => {\n            const content = e.target.result;\n            const lines = content.split(/\\r\\n|\\n/);\n            \n            let startTtime;\n            let endTime;\n            let text = \"\";\n            const lineWarps = [];\n            for(let i = 0; i < lines.length; i++) {\n\n                let line = lines[i]\n                if(line.match(/^\\s*\\d*\\s*$/) != null) {\n                    continue\n                }\n                const match = line.match(/^(?<start>\\d{2}:\\d{2}:\\d{2}[,|.]\\d{3}).*(?<end>\\d{2}:\\d{2}:\\d{2}[,|.]\\d{3})/)\n                if(match != null) {\n                    if(startTtime != null) {\n                        lineWarps.push(new Line(startTtime, endTime, text));\n                    }\n                    startTtime = match.groups.start;\n                    endTime = match.groups.end;\n                    text = \"\";\n                    \n                    continue\n                }\n            \n                if(line.match(/^[\\W|A-Z]/) != null) {\n                    text = text + '\\n' + line\n                } else {\n                    text = text + ' ' + line\n                }\n                \n            }\n            lineWarps.push(new Line(startTtime, endTime, text));\n\n            this.setState({\n                subtitleLines: lineWarps\n            });\n        };\n\n        reader.readAsText(file);\n    }\n\n    render() {\n        const languageOptions = LanguageList.map(it => {\n            return <option key={it.language} value={it.language}>{it.display}</option>\n        })\n\n        const list = this.state.subtitleLines.map((it, idx) => {\n            let timeTag = it.time;\n            if(idx > 0) {\n                const pre = this.state.subtitleLines[idx - 1];\n                if(it.startTimeStamp - pre.endTimeStamp < 1 * 1000) {\n                    timeTag =\"\";\n                }\n            }\n            return <SubtitleLine key={it.time} time={timeTag} text={it.text} />\n        })\n\n        let printBtn;\n        if(this.state.subtitleLines.length != 0) {\n            printBtn = <FormattedMessage id='print' >\n                { text => (\n                    <input \n                        type=\"button\" value={text}\n                    />\n                )\n                }\n            </FormattedMessage>\n        }\n        return (\n            <div className=\"conveter_container\">\n                <div className=\"nav_bar\">\n                    <select onChange={(e) => this.onLanguageChanged(e.target.value)}>\n                        { languageOptions }\n                    </select>\n                </div>\n                <FormattedMessage id='select_file' >\n                {\n                    text => (\n                        <label  className=\"btn btn-outline-primary btn-sm\">\n                            <input type=\"file\" accept=\".srt\" style={{ display:'none' }} onChange={(e) => this.onSelectFile(e.target.files)} />\n                            {text}\n                        </label>\n                    )\n                }\n               \n                </FormattedMessage>\n                { printBtn }\n                { list }\n            </div>\n            \n            \n        )\n    };\n\n}\n\nexport default Converter;","class LocalUtils {\n\n    static chooseDefaultLocal() {\n      const localStorageLanguage = window.localStorage[this.LOCAL_STORAGE_KEY_LOCAL];\n      if(localStorageLanguage) {\n        return localStorageLanguage;\n      } \n      return navigator.language\n    }\n\n    static saveLocal(local) {\n      window.localStorage[this.LOCAL_STORAGE_KEY_LOCAL] = local\n    }\n\n    static chooseLocaleMessages(locale) {\n      if(locale == null) {\n        return require('./en_US').default\n      }\n      \n      let messages;\n      switch(locale.split('-')[0]){\n        case \"zh\": \n          messages = require('./zh_TW').default\n          break\n        default: \n          messages = require('./en_US').default\n      }\n      return messages;\n    }\n}\nLocalUtils.LOCAL_STORAGE_KEY_LOCAL = \"_LOCAL_STORAGE_KEY_LOCAL_\";\n\nexport default LocalUtils;\n  ","import React from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport { IntlProvider, addLocaleData } from 'react-intl';\nimport Converter from './components/Converter';\n\nimport enLocaleData from 'react-intl/locale-data/en';\nimport zhLocaleData from 'react-intl/locale-data/zh';\nimport LocalUtils from './locales/LocalUtils'\n\n\nexport default class App extends React.Component {\n    constructor(props) {\n      super(props);\n      addLocaleData([...enLocaleData, ...zhLocaleData]);\n      this.onLanguageChanged = this.onLanguageChanged.bind(this);\n      const locale = LocalUtils.chooseDefaultLocal();\n      const messages = LocalUtils.chooseLocaleMessages(locale);\n      this.state = {\n        locale: locale,\n        messages: messages\n      };\n    }\n\n    onLanguageChanged(languageCode) {\n      this.setState({\n        locale: languageCode,\n        messages: LocalUtils.chooseLocaleMessages(languageCode)\n      });\n      LocalUtils.saveLocal(languageCode);\n    }\n\n\n    render() {\n      \n      return (\n        <IntlProvider locale={this.state.locale} messages={this.state.messages}>\n          <div className=\"container\">\n            <Converter onLanguageChanged={this.onLanguageChanged}/>\n          </div>\n        </IntlProvider>\n      )\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}